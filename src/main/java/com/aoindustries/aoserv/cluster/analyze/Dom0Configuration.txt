/*
 * aoserv-cluster - Cluster optimizer for the AOServ Platform.
 * Copyright (C) 2007-2011, 2020  AO Industries, Inc.
 *     support@aoindustries.com
 *     7262 Bull Pen Cir
 *     Mobile, AL 36695
 *
 * This file is part of aoserv-cluster.
 *
 * aoserv-cluster is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * aoserv-cluster is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with aoserv-cluster.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.aoindustries.aoserv.cluster.analyze;

import com.aoindustries.aoserv.cluster.*;
import java.io.Serializable;

/**
 * One Xen dom0 configuration.
 *
 * @author  AO Industries, Inc.
 */
public class Dom0Configuration implements Serializable {

	private static final long serialVersionUID = 1L;

	final Dom0 dom0;

	/**
	 * This is the set of DomU that are primary or secondary on this Dom0.
	 */
	private final SortedSet<DomU> domUs = new TreeSet<DomU>();
	private final SortedSet<DomU> unmodifiableDomUs = Collections.unmodifiableSortedSet(domUs);

	/**
	 * The total amount of primary RAM allocated to this Dom0, this cannot be overcommitted.
	 */
	private int allocatedPrimaryRam = 0;

	/**
	 * The total amount of secondary RAM allocated per primary Dom0, this can be overcommitted in
	 * a non-optimal state.
	 */
	private final Map<Dom0,Integer> allocatedSecondaryRams = new HashMap<Dom0,Integer>();
	private final Map<Dom0,Integer> unmodifiableAllocatedSecondaryRams = Collections.unmodifiableMap(allocatedSecondaryRams);

	/**
	 * The total amount of primary processor weight allocated to this Dom0, this can be overcommitted in
	 * a non-optimal state.
	 */
	private int allocatedPrimaryProcessorWeight = 0;

	/**
	 * The total amount of secondary processor weight allocated per primary Dom0, this can be overcommitted
	 * in non-optimal state.
	 */
	private final Map<Dom0,Integer> allocatedSecondaryProcessorWeights = new HashMap<Dom0,Integer>();
	private final Map<Dom0,Integer> unmodifiableAllocatedSecondaryProcessorWeights = Collections.unmodifiableMap(allocatedSecondaryProcessorWeights);

	Dom0Configuration(
		Dom0 dom0
	) {
		this.dom0 = dom0;
	}

	@Override
	public String toString() {
		return dom0.toString();
	}

	public Dom0 getDom0() {
		return dom0;
	}

	/*
	@Override
	public boolean equals(Object O) {
		if(O==null) return false;
		if(!(O instanceof Dom0)) return false;
		Dom0 other = (Dom0)O;
		return
			cluster==other.cluster
			&& hostname.equals(other.hostname)
		;
	}*/

	/**
	 * @see Cluster#deepEquals
	 */
	/*boolean deepEquals(Dom0 other) {
		if(allocatedPrimaryRam!=other.allocatedPrimaryRam) return false;
		if(allocatedPrimaryProcessorWeight!=other.allocatedPrimaryProcessorWeight) return false;
		if(ram!=other.ram) return false;
		if(processorType!=other.processorType) return false;
		if(processorArchitecture!=other.processorArchitecture) return false;
		if(processorSpeed!=other.processorSpeed) return false;
		if(processorCores!=other.processorCores) return false;
		if(supportsHvm!=other.supportsHvm) return false;
		if(!hostname.equals(other.hostname)) return false;
		// dom0Disks
		{
			int size = dom0Disks.size();
			if(size!=other.dom0Disks.size()) return false;
			Iterator<Dom0Disk> myDom0DisksIter = dom0Disks.iterator();
			Iterator<Dom0Disk> otherDom0DisksIter = other.dom0Disks.iterator();
			while(myDom0DisksIter.hasNext()) {
				if(!myDom0DisksIter.next().deepEquals(otherDom0DisksIter.next())) return false;
			}
		}
		// Skipping because all other things being equal, these should be too: domUs
		// Skipping because all other things being equal, these should be too: private final Map<Dom0,Integer> allocatedSecondaryRams = new HashMap<Dom0,Integer>();
		// Skipping because all other things being equal, these should be too: private final Map<Dom0,Integer> allocatedSecondaryProcessorWeights = new HashMap<Dom0,Integer>();
		return true;
	}*/

	/*
	@Override
	public int hashCode() {
		// Get NullPointerException on object deserialization because this is put into a map before the values are set
		if(cluster==null || hostname==null) return System.identityHashCode(this);
		return cluster.hashCode() * 31 + hostname.hashCode();
	}*/

	/**
	 * Adds a DomU as primary to this Dom0.
	 *
	 * @see Cluster#addDomU
	 */
	void addPrimaryDomU(DomU domU) {
		// Add to the set
		if(!domU.getPrimaryDom0().equals(this)) throw new IllegalArgumentException(this+": DomU is not primary on this Dom0");
		if(domUs.contains(domU)) throw new IllegalArgumentException(this+": DomU is already on this Dom0");
		domUs.add(domU);

		// Add to RAM allocation
		allocatedPrimaryRam += domU.getPrimaryRam();

		// Add to CPU allocation
		allocatedPrimaryProcessorWeight += domU.getPrimaryProcessorCores() * domU.getPrimaryProcessorWeight();
	}

	/**
	 * Adds a DomU as secondary to this Dom0.
	 *
	 * @see Cluster#addDomU
	 */
	void addSecondaryDomU(DomU domU) {
		// Add to the set
		if(!domU.getSecondaryDom0().equals(this)) throw new IllegalArgumentException(this+": DomU is not secondary on this Dom0");
		if(domUs.contains(domU)) throw new IllegalArgumentException(this+": DomU is already on this Dom0");
		domUs.add(domU);

		Dom0 primaryDom0 = domU.getPrimaryDom0();

		// Add to RAM allocation
		int secondaryRam = domU.getSecondaryRam();
		if(secondaryRam!=-1) {
			Integer totalSecondaryRam = allocatedSecondaryRams.get(primaryDom0);
			allocatedSecondaryRams.put(primaryDom0, totalSecondaryRam==null ? secondaryRam : (totalSecondaryRam + secondaryRam));
		}

		// Add to CPU allocation
		int secondaryProcessorCores = domU.getSecondaryProcessorCores();
		if(secondaryProcessorCores!=-1) {
			int secondaryProcessorWeight = domU.getSecondaryProcessorWeight();
			if(secondaryProcessorWeight!=-1) {
				int secondaryCpuWeight = secondaryProcessorCores * secondaryProcessorWeight;
				Integer totalSecondaryProcessorWeight = allocatedSecondaryProcessorWeights.get(primaryDom0);
				allocatedSecondaryProcessorWeights.put(primaryDom0, totalSecondaryProcessorWeight==null ? secondaryCpuWeight : (totalSecondaryProcessorWeight + secondaryCpuWeight));
			}
		}
	}

	/**
	 * Gets the number of megabytes of RAM that have been allocated to primary mode.
	 */
	public int getAllocatedPrimaryRam() {
		return allocatedPrimaryRam;
	}

	/**
	 * Gets an unmodifiable view of the allocated secondary RAM.
	 */
	public Map<Dom0,Integer> getAllocatedSecondaryRams() {
		return unmodifiableAllocatedSecondaryRams;
	}

	/**
	 * Gets the total primary allocated processor weight.
	 */
	public int getAllocatedPrimaryProcessorWeight() {
		return allocatedPrimaryProcessorWeight;
	}

	/**
	 * Gets the unmodifiable view of the allocated secondary processor weights.
	 */
	public Map<Dom0,Integer> getAllocatedSecondaryProcessorWeights() {
		return unmodifiableAllocatedSecondaryProcessorWeights;
	}

	/**
	 * Gets the unmodifiable set of DomU that are either primary or secondary on this Dom0.
	 */
	public SortedSet<DomU> getDomUs() {
		return unmodifiableDomUs;
	}
}
