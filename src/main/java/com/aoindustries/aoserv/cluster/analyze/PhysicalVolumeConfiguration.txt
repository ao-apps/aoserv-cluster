/*
 * aoserv-cluster - Cluster optimizer for the AOServ Platform.
 * Copyright (C) 2007-2011, 2020  AO Industries, Inc.
 *     support@aoindustries.com
 *     7262 Bull Pen Cir
 *     Mobile, AL 36695
 *
 * This file is part of aoserv-cluster.
 *
 * aoserv-cluster is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * aoserv-cluster is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with aoserv-cluster.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.aoindustries.aoserv.cluster.analyze;

import com.aoindustries.aoserv.cluster.*;
import java.io.Serializable;

/**
 * One LVM physical volume configuration.
 *
 * @author  AO Industries, Inc.
 */
public class PhysicalVolumeConfiguration implements Serializable {

	private static final long serialVersionUID = 1L;

	private final PhysicalVolume physicalVolume;

	/**
	 * The list of DomUDisk that use part of this PhysicalVolume.
	 * They must all be on the same DomU.
	 */
	private final Set<DomUDisk> domUDisks = new HashSet<DomUDisk>();

	/**
	 * Extents allocation is effected by both primary and secondary allocation,
	 * this cannot be overcommitted.
	 */
	private int allocatedExtents;

	PhysicalVolumeConfiguration(
		PhysicalVolume physicalVolume
	) {
		this.physicalVolume = physicalVolume;
	}

	@Override
	public String toString() {
		return physicalVolume.toString();
	}

	public PhysicalVolume getPhysicalVolume() {
		return physicalVolume;
	}

	/*
	@Override
	public boolean equals(Object O) {
		if(O==null) return false;
		if(!(O instanceof PhysicalVolume)) return false;
		PhysicalVolume other = (PhysicalVolume)O;
		return
			dom0Disk.equals(other.dom0Disk)
			&& partition==other.partition
		;
	}*/

	/**
	 * @see Cluster#deepEquals
	 */
	/*
	boolean deepEquals(PhysicalVolume other) {
		return partition==other.partition && extents==other.extents;
	}*/

	/*
	@Override
	public int hashCode() {
		return dom0Disk.hashCode() * 31 + partition;
	}*/

	/**
	 * Gets the number of extents that have been allocated.
	 */
	public int getAllocatedExtents() {
		return allocatedExtents;
	}

	/**
	 * Adds a disk to the allocation.
	 * 
	 * @see DomU#addDomUDisk
	 */
	void addDomUDisk(DomUDisk domUDisk, int allocateExtents, int weight) {
		// Must not be added more than once
		if(domUDisks.contains(domUDisk)) throw new IllegalArgumentException(this+": DomUDisk has already been added to this PhysicalVolume");

		// All disks on this physical volume must be for the same DomU
		DomU domU = domUDisk.getDomU();
		for(DomUDisk existing : domUDisks) {
			if(!existing.getDomU().equals(domU)) throw new IllegalArgumentException(this+": Not all DomUDisk for this PhysicalVolume are on the same DomU");
		}

		// Add to the set of DomUDisk
		domUDisks.add(domUDisk);

		// Add the extents allocation
		int newAllocatedExtents = allocatedExtents + allocateExtents;
		if(newAllocatedExtents>extents) throw new IllegalArgumentException(this+": Not enough available extents for requested allocation");
		allocatedExtents = newAllocatedExtents;

		// Add to the disk weight allocation
		getDom0Disk().addDomUDisk(domUDisk, weight);
	}
}
