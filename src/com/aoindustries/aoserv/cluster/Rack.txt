/*
 * Copyright 2007-2011 by AO Industries, Inc.,
 * 7262 Bull Pen Cir, Mobile, Alabama, 36695, U.S.A.
 * All rights reserved.
 */
package com.aoindustries.aoserv.cluster;

import java.io.Serializable;

/**
 * A solution could consider allocating resources between racks so
 * that a power failure in one rack would not effect the overall ability
 * of the cluster.  Also, specific DomU could be grouped to be in different
 * racks, such as MySQL master and MySQL slave(s).
 *
 * @author  AO Industries, Inc.
 */
public class Rack implements Comparable<Rack>, Serializable {
    
    private static final long serialVersionUID = 1L;

    final Cluster cluster;
    final String id;

    /**
     * @see Cluster#addRack
     */
    Rack(Cluster cluster, String id) {
        this.cluster = cluster;
        this.id = id;
    }
    
    public Cluster getCluster() {
        return cluster;
    }
    
    /**
     * Gets the per-cluster unique ID.
     */
    public String getId() {
        return id;
    }

    @Override
    public String toString() {
        return cluster.toString()+'/'+id;
    }

    @Override
    public boolean equals(Object O) {
        if(O==null) return false;
        if(!(O instanceof Rack)) return false;
        Rack other = (Rack)O;
        return
            cluster==other.cluster
            && id.equals(other.id)
        ;
    }
    
    @Override
    public int hashCode() {
        return cluster.hashCode() * 31 + id.hashCode();
    }

    /**
     * Sorted ascending by:
     * <ol>
     *   <li>clusterName</li>
     *   <li>id</li>
     * </ol>
     */
    @Override
    public int compareTo(Rack other) {
        if(this==other) return 0;

        int diff = cluster.compareTo(other.cluster);
        if(diff!=0) return diff;
        
        return id.compareTo(other.id);
    }
}
